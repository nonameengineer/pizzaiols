{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/in-memory-web-api/data/user/pizzas-response.data.ts","./src/app/in-memory-web-api/data/user/user-response-data.ts","./src/app/in-memory-web-api/in-memory-web-api.module.ts","./src/app/in-memory-web-api/services/app.in-memory-web-api.service.ts","./src/app/in-memory-web-api/services/pizzas.in-memory-web-api.service.ts","./src/app/in-memory-web-api/services/user.in-memory-web-api.service.ts","./src/app/mocks/pizzas/get-pizzas-response.mock.ts","./src/app/mocks/user/user-login-response.mock.ts","./src/app/models/pizzas/get-pizzas-response.model.ts","./src/app/models/response/response-success.model.ts","./src/app/models/user/user-login-response.model.ts","./src/app/services/pizzas/pizzas.service.ts","./src/app/services/user/user.service.ts","./src/app/store/root/app/actions.ts","./src/app/store/root/app/app-store.module.ts","./src/app/store/root/app/index.ts","./src/app/store/root/app/reducer.ts","./src/app/store/root/app/selectors.ts","./src/app/store/root/app/state.ts","./src/app/store/root/client/basket/basket.actions.ts","./src/app/store/root/client/basket/basket.reducer.ts","./src/app/store/root/client/basket/basket.selectors.ts","./src/app/store/root/client/basket/basket.state.ts","./src/app/store/root/client/basket/index.ts","./src/app/store/root/client/client-store.module.ts","./src/app/store/root/client/index.ts","./src/app/store/root/client/pizzas/index.ts","./src/app/store/root/client/pizzas/pizzas.actions.ts","./src/app/store/root/client/pizzas/pizzas.effects.ts","./src/app/store/root/client/pizzas/pizzas.reducer.ts","./src/app/store/root/client/pizzas/pizzas.selectors.ts","./src/app/store/root/client/pizzas/pizzas.state.ts","./src/app/store/root/client/state.ts","./src/app/store/root/client/user/index.ts","./src/app/store/root/client/user/user.actions.ts","./src/app/store/root/client/user/user.effects.ts","./src/app/store/root/client/user/user.reducer.ts","./src/app/store/root/client/user/user.selectors.ts","./src/app/store/root/client/user/user.state.ts","./src/app/store/root/index.ts","./src/app/store/root/root-store.module.ts","./src/app/store/root/router/index.ts","./src/app/store/root/state.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {AppComponent} from './app.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AppComponent,\n    children: [\n      {\n        path: 'pizzas',\n        loadChildren: () => import('./modules/pizzas/pizzas.module').then(mod => mod.PizzasModule)\n      },\n      {\n        path: 'auth',\n        loadChildren: () => import('./modules/auth/auth.module').then(mod => mod.AuthModule)\n      },\n      {\n        path: 'basket',\n        loadChildren: () => import('./modules/basket/basket.module').then(mod => mod.BasketModule)\n      },\n      {\n        path: '',\n        redirectTo: 'pizzas',\n        pathMatch: 'full'\n      },\n      {\n        path: '**',\n        redirectTo: ''\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(\n      routes,\n      {\n        useHash: false,\n        enableTracing: false\n      }\n    )\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n}\n","<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport {RootStoreModule} from '@app/store/root';\nimport {HttpClientModule} from '@angular/common/http';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {InMemoryWebApiModule} from '@app/in-memory-web-api/in-memory-web-api.module';\nimport {HashLocationStrategy, LocationStrategy} from '@angular/common';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    InMemoryWebApiModule,\n    AppRoutingModule,\n    RootStoreModule,\n  ],\n  providers: [{provide : LocationStrategy , useClass: HashLocationStrategy}],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {GetPizzasResponse} from '@app/models/pizzas/get-pizzas-response.model';\nimport mockGetPizzasResponse from '@app/mocks/pizzas/get-pizzas-response.mock';\nimport {ResponseSuccess} from '@app/models/response/response-success.model';\n\nexport const pizzasResponseData: ResponseSuccess<GetPizzasResponse> = new ResponseSuccess<GetPizzasResponse>()\npizzasResponseData.data = mockGetPizzasResponse;\n","import {UserLoginResponse} from '@app/models/user/user-login-response.model';\nimport mockUserLoginResponse from '@app/mocks/user/user-login-response.mock';\n\nexport const userResponseData: UserLoginResponse = mockUserLoginResponse;\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {HttpClientInMemoryWebApiModule} from 'angular-in-memory-web-api';\nimport {AppInMemoryWebAPIService} from '@app/in-memory-web-api/services/app.in-memory-web-api.service';\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    HttpClientInMemoryWebApiModule.forRoot(\n      AppInMemoryWebAPIService, {\n        delay: 0,\n        dataEncapsulation: true,\n        apiBase: '/api/v1',\n        host: 'localhost',\n      }\n    )\n  ]\n})\nexport class InMemoryWebApiModule {\n}\n","import {Injectable} from '@angular/core';\nimport {getStatusText, InMemoryDbService, RequestInfo, ResponseOptions} from 'angular-in-memory-web-api';\nimport {userResponseData} from '@app/in-memory-web-api/data/user/user-response-data';\nimport {UserInMemoryWebAPIService} from '@app/in-memory-web-api/services/user.in-memory-web-api.service';\nimport {PizzasInMemoryWebAPIService} from '@app/in-memory-web-api/services/pizzas.in-memory-web-api.service';\nimport {pizzasResponseData} from '@app/in-memory-web-api/data/user/pizzas-response.data';\n\n@Injectable()\nexport class AppInMemoryWebAPIService implements InMemoryDbService {\n  userInMemoryWebAPIService;\n  pizzasInMemoryWebAPIService;\n\n  createDb() {\n    this.userInMemoryWebAPIService = new UserInMemoryWebAPIService();\n    this.pizzasInMemoryWebAPIService = new PizzasInMemoryWebAPIService();\n\n    return {\n      userResponseData,\n      pizzasResponseData\n    };\n  }\n\n  /**\n   * HTTP GET interceptor.\n   */\n  get(reqInfo: RequestInfo) {\n    const url = reqInfo.req.url;\n    const collectionName = reqInfo.collectionName;\n\n    // User\n    if (collectionName === this.userInMemoryWebAPIService.collectionName) {\n      return this.userInMemoryWebAPIService.get(reqInfo);\n    }\n\n    // Pizzas\n    if (collectionName === this.pizzasInMemoryWebAPIService.collectionName) {\n      return this.pizzasInMemoryWebAPIService.get(reqInfo);\n    }\n\n    return undefined; // let the default GET handle all others\n  }\n\n  /**\n   * Helper\n   */\n  private finishOptions(options: ResponseOptions, {headers, url}: RequestInfo) {\n    options.statusText = getStatusText(options.status);\n    options.headers = headers;\n    options.url = url;\n\n    return options;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {getStatusText, RequestInfo, ResponseOptions, STATUS} from 'angular-in-memory-web-api';\nimport {environment} from '@src/environments/environment';\nimport {APIService} from '@app/interfaces/api-service.interface';\nimport {userResponseData} from '@app/in-memory-web-api/data/user/user-response-data';\nimport {pizzasResponseData} from '@app/in-memory-web-api/data/user/pizzas-response.data';\n\n@Injectable()\nexport class PizzasInMemoryWebAPIService implements APIService {\n  readonly host = environment.host;\n  readonly collectionName = 'pizzas';\n\n  /**\n   * HTTP GET interceptor.\n   */\n  get(reqInfo: RequestInfo) {\n    const url = reqInfo.req.url;\n\n    switch (url) {\n      case `${this.host}/api/v1/pizzas`: {\n        return this.getPizzas(reqInfo);\n      }\n    }\n\n    return undefined; // let the default GET handle all others\n  }\n\n  /**\n   * GET: `/api/v1/pizzas`.\n   * Returns pizzas response\n   */\n  getPizzas(reqInfo: RequestInfo) {\n    return reqInfo.utils.createResponse$(() => {\n      const options: ResponseOptions = {\n        body: pizzasResponseData,\n        status: STATUS.OK\n      };\n\n      return this.finishOptions(options, reqInfo);\n    });\n  }\n\n  /**\n   * Helper\n   */\n  private finishOptions(options: ResponseOptions, {headers, url}: RequestInfo) {\n    options.statusText = getStatusText(options.status);\n    options.headers = headers;\n    options.url = url;\n\n    return options;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {getStatusText, RequestInfo, ResponseOptions, STATUS} from 'angular-in-memory-web-api';\nimport {environment} from '@src/environments/environment';\nimport {APIService} from '@app/interfaces/api-service.interface';\nimport {userResponseData} from '@app/in-memory-web-api/data/user/user-response-data';\n\n@Injectable()\nexport class UserInMemoryWebAPIService implements APIService {\n  readonly host = environment.host;\n  readonly collectionName = 'user';\n\n  /**\n   * HTTP GET interceptor.\n   */\n  get(reqInfo: RequestInfo) {\n    const url = reqInfo.req.url;\n\n    switch (url) {\n      case `${this.host}/api/v1/user/profile`: {\n        return this.getProfile(reqInfo);\n      }\n    }\n\n    return undefined; // let the default GET handle all others\n  }\n\n  post(reqInfo: RequestInfo) {\n    const url = reqInfo.req.url;\n\n    switch (url) {\n      case `${this.host}/api/v1/user/login`: {\n        return this.postLogin(reqInfo);\n      }\n    }\n\n  }\n\n  /**\n   * GET: `/api/v1/user/profile`.\n   * Returns info about profile\n   */\n  getProfile(reqInfo: RequestInfo) {\n    return reqInfo.utils.createResponse$(() => {\n      const options: ResponseOptions = {\n        body: userResponseData,\n        status: STATUS.OK\n      };\n\n      return this.finishOptions(options, reqInfo);\n    });\n  }\n\n  /**\n   * POST: `/api/v1/user/login`.\n   * Returns user login response.\n   */\n  postLogin(reqInfo: RequestInfo) {\n    return reqInfo.utils.createResponse$(() => {\n      const options: ResponseOptions = {\n        body: userResponseData,\n        status: STATUS.OK\n      };\n\n      return this.finishOptions(options, reqInfo);\n    });\n  }\n\n  /**\n   * Helper\n   */\n  private finishOptions(options: ResponseOptions, {headers, url}: RequestInfo) {\n    options.statusText = getStatusText(options.status);\n    options.headers = headers;\n    options.url = url;\n\n    return options;\n  }\n}\n","import {GetPizzasResponse} from '@app/models/pizzas/get-pizzas-response.model';\n\nconst mockGetPizzasResponse = new GetPizzasResponse();\nmockGetPizzasResponse.pizzas = [\n  {\n    id: '0',\n    name: 'Margherita',\n    description: 'PIZZA_DESCRIPTION_0',\n    toppings: ['anchovy', 'basil', 'mozzarella', 'tomato'],\n    price: 100,\n  },\n  {\n    id: '1',\n    name: 'Marinara',\n    description: 'PIZZA_DESCRIPTION_1',\n    toppings: ['sweetcorn', 'pepper', 'onion', 'olive'],\n    price: 130,\n  },\n  {\n    id: '2',\n    name: 'Napoletana',\n    description: 'PIZZA_DESCRIPTION_2',\n    toppings: ['bacon', 'mushroom', 'chili', 'pepperoni'],\n    price: 146,\n  }\n];\n\nexport default mockGetPizzasResponse;\n","import {UserLoginResponse} from '@app/models/user/user-login-response.model';\n\nconst mockUserLoginResponse = new UserLoginResponse();\nmockUserLoginResponse.token = 'TOKEN';\n// TODO: add date\nmockUserLoginResponse.expiresAt = 'DATE';\n\nexport default mockUserLoginResponse;\n","export class GetPizzasResponse {\n  pizzas: any[];\n}\n","export class ResponseSuccess<T> {\n  data: T;\n  success = true;\n}\n","export class UserLoginResponse {\n  token: string;\n  expiresAt: string;\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {environment} from 'src/environments/environment';\nimport {APIService} from '@app/interfaces/api-service.interface';\nimport {ResponseSuccess} from '@app/models/response/response-success.model';\nimport {GetPizzasResponse} from '@app/models/pizzas/get-pizzas-response.model';\n\n/**\n * Implementation of pizzas APIs.\n */\n@Injectable({providedIn: 'root'})\nexport class PizzasService implements APIService {\n  readonly host = environment.host;\n\n  constructor(private http: HttpClient) {\n  }\n\n  /**\n   * GET: /api/v1/pizzas\n   * Get Pizzas.\n   */\n  getPizzas(token: string): Observable<ResponseSuccess<GetPizzasResponse>> {\n    return this.http.get<ResponseSuccess<GetPizzasResponse>>(`${this.host}/api/v1/pizzas`, {\n      headers: new HttpHeaders({Authorization: `Bearer ${token}`}),\n    });\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {environment} from 'src/environments/environment';\nimport {APIService} from '@app/interfaces/api-service.interface';\nimport {UserLoginRequest} from '@app/models/user/user-login-request.model';\nimport {ResponseSuccess} from '@app/models/response/response-success.model';\nimport {UserLoginResponse} from '@app/models/user/user-login-response.model';\n\n/**\n * Implementation of user APIs.\n */\n@Injectable({providedIn: 'root'})\nexport class UserService implements APIService {\n  readonly host = environment.host;\n\n  constructor(private http: HttpClient) {\n  }\n\n  /**\n   * POST: /api/v1/user/login\n   * Login.\n   */\n  login(request: UserLoginRequest): Observable<ResponseSuccess<UserLoginResponse>> {\n    return this.http.post<ResponseSuccess<UserLoginResponse>>(`${this.host}/api/v1/user/login`, request);\n  }\n}\n","import {Action} from '@ngrx/store';\nimport {ResponseError} from '@app/models/response/response-error.model';\n\nexport enum ActionTypes {\n  AddErrorResponse = '[Errors] Add Error Response',\n}\n\n\nexport class AddErrorResponse implements Action {\n  public readonly type = ActionTypes.AddErrorResponse;\n\n  constructor(public payload: { response: ResponseError }) {\n  }\n}\n\nexport type Actions = AddErrorResponse;\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {StoreModule} from '@ngrx/store';\nimport {AppStoreReducer} from '@app/store/root/app/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StoreModule.forFeature('app', AppStoreReducer.reducer),\n  ],\n})\nexport class AppStoreModule {\n}\n","import * as AppStoreActions from './actions';\nimport * as AppStoreSelectors from './selectors';\nimport * as AppStoreState from './state';\nimport * as AppStoreReducer from './reducer';\n\nexport {\n  AppStoreActions,\n  AppStoreSelectors,\n  AppStoreState,\n  AppStoreReducer,\n};\n","import {Actions, ActionTypes} from './actions';\nimport {initialState, State} from './state';\n\nexport function reducer(state = initialState, action: Actions): State {\n  switch (action.type) {\n    case ActionTypes.AddErrorResponse: {\n      return {\n        ...state,\n        errorResponse: action.payload.response\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","import {createSelector} from '@ngrx/store';\nimport {State} from './state';\nimport {RootStoreState} from '@app/store/root';\n\nexport const getAppState = (state: RootStoreState.State) => state.app;\n\nexport const getErrorsResponseState = createSelector(\n  getAppState,\n  (state: State) => state.errorResponse\n);\n","import {ResponseError} from '@app/models/response/response-error.model';\n\nexport interface State {\n  errorResponse: ResponseError;\n}\n\nexport const initialState: State = {\n  errorResponse: null,\n};\n","import {Action} from '@ngrx/store';\n\n\nexport enum ActionTypes {\n  AddPizzas = '[Basket] Add Pizzas',\n}\n\n\n// Add Pizzas\n\nexport class AddPizzas implements Action {\n  readonly type = ActionTypes.AddPizzas;\n\n  constructor(public payload: {pizzas: any[]}) {\n  }\n}\n\n\nexport type Actions = AddPizzas;\n","import {ActionTypes, Actions} from './basket.actions';\nimport {initialState} from './basket.state';\nimport {State} from './basket.state';\nimport {GetPizzasResponse} from '@app/models/pizzas/get-pizzas-response.model';\n\nexport function reducer(state = initialState, action: Actions): State {\n  switch (action.type) {\n    // Add Pizzas\n    case ActionTypes.AddPizzas: {\n      const resp = new GetPizzasResponse();\n      resp.pizzas = action.payload.pizzas;\n\n      return {\n        ...state,\n        pizzasResponse: resp\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n\n}\n","import {RootStoreState} from '@app/store/root';\nimport {createSelector} from '@ngrx/store';\nimport {State} from '@app/store/root/client/basket/basket.state';\nimport {GetPizzasResponse} from '@app/models/pizzas/get-pizzas-response.model';\n\nexport const getBasketState = (state: RootStoreState.State) => state.client.basket;\n\nexport const getPizzasResponseState = createSelector(\n  getBasketState,\n  (state: State) => state.pizzasResponse\n);\n\nexport const getTotalState = createSelector(\n  getPizzasResponseState,\n  (state: GetPizzasResponse) => {\n    if (state.pizzas) {\n      return state.pizzas\n        .map(pizza => pizza.price)\n        .reduce(\n          (accumulator, currentValue) => accumulator + currentValue\n        );\n    }\n  }\n);\n\nexport const getPizzasCountState = createSelector(\n  getPizzasResponseState,\n  (state: GetPizzasResponse) => {\n    if (state.pizzas) {\n      return state.pizzas.length;\n    }\n  }\n);\n","import {GetPizzasResponse} from '@app/models/pizzas/get-pizzas-response.model';\nimport mockGetPizzasResponse from '@app/mocks/pizzas/get-pizzas-response.mock';\n\nexport interface State {\n  pizzasResponse: GetPizzasResponse;\n}\n\nexport const initialState: State = {\n  pizzasResponse: {\n    pizzas: mockGetPizzasResponse.pizzas.slice(0, 2)\n  }\n};\n","import * as BasketStoreActions from './basket.actions';\nimport * as BasketStoreSelectors from './basket.selectors';\nimport * as BasketStoreState from './basket.state';\n\nexport {\n  BasketStoreActions,\n  BasketStoreSelectors,\n  BasketStoreState\n};\n","import {CommonModule} from '@angular/common';\nimport {InjectionToken, NgModule} from '@angular/core';\nimport {ActionReducerMap, StoreModule} from '@ngrx/store';\nimport {EffectsModule} from '@ngrx/effects';\nimport * as ClientStoreState from '@app/store/root/client/state';\nimport * as UserStoreReducer from '@app/store/root/client/user/user.reducer';\nimport * as PizzasStoreReducer from '@app/store/root/client/pizzas/pizzas.reducer';\nimport * as BasketStoreReducer from '@app/store/root/client/basket/basket.reducer';\nimport {UserEffects} from '@app/store/root/client/user/user.effects';\nimport {PizzasEffects} from '@app/store/root/client/pizzas/pizzas.effects';\n\n\nexport const FEATURE_REDUCER_TOKEN = new InjectionToken<ActionReducerMap<ClientStoreState.State>>('Client Feature Reducers');\n\nexport function getReducers(): ActionReducerMap<ClientStoreState.State> {\n  // map of reducers\n  return {\n    user: UserStoreReducer.reducer,\n    pizzas: PizzasStoreReducer.reducer,\n    basket: BasketStoreReducer.reducer,\n  };\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    EffectsModule.forFeature([\n      UserEffects,\n      PizzasEffects,\n    ]),\n    StoreModule.forFeature('client', FEATURE_REDUCER_TOKEN),\n  ],\n  providers: [\n    {\n      provide: FEATURE_REDUCER_TOKEN,\n      useFactory: getReducers,\n    },\n  ],\n})\nexport class ClientStoreModule {\n}\n","import {ClientStoreModule} from './client-store.module';\n\nimport * as ClientStoreState from './state';\n\nexport * from './user';\nexport * from './pizzas';\nexport * from './basket';\n\nexport {ClientStoreModule, ClientStoreState};\n","import * as PizzasStoreActions from './pizzas.actions';\nimport * as PizzasStoreSelectors from './pizzas.selectors';\nimport * as PizzasStoreState from './pizzas.state';\n\nexport {\n  PizzasStoreActions,\n  PizzasStoreSelectors,\n  PizzasStoreState\n};\n","import {Action} from '@ngrx/store';\nimport {ResponseSuccess} from '@app/models/response/response-success.model';\nimport {ResponseError} from '@app/models/response/response-error.model';\nimport {GetPizzasResponse} from '@app/models/pizzas/get-pizzas-response.model';\n\n\nexport enum ActionTypes {\n\n  // Get Pizzas\n\n  GetPizzas = '[Pizzas] Get Pizzas',\n  GetPizzasSuccess = '[Pizzas] Get Pizzas Success',\n  GetPizzasFailure = '[Pizzas] Get Pizzas Failure',\n}\n\n\n// GetPizzas\n\nexport class GetPizzas implements Action {\n  readonly type = ActionTypes.GetPizzas;\n}\n\nexport class GetPizzasSuccess implements Action {\n  readonly type = ActionTypes.GetPizzasSuccess;\n\n  constructor(public payload: {response: ResponseSuccess<GetPizzasResponse>}) {\n  }\n}\n\nexport class GetPizzasFailure implements Action {\n  readonly type = ActionTypes.GetPizzasFailure;\n\n  constructor(public payload: {response: ResponseError}) {\n  }\n}\n\n\nexport type Actions =\n\n  // GetPizzas\n\n  | GetPizzas\n  | GetPizzasSuccess\n  | GetPizzasFailure;\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {select, Store} from '@ngrx/store';\nimport {RootStoreState} from '../../index';\nimport {catchError, map, switchMap, withLatestFrom} from 'rxjs/operators';\nimport {ActionTypes, GetPizzas, GetPizzasFailure, GetPizzasSuccess} from './pizzas.actions';\nimport {ResponseSuccess} from '@app/models/response/response-success.model';\nimport {ResponseError} from '@app/models/response/response-error.model';\nimport {AppStoreActions} from '@app/store/root/app';\nimport {of} from 'rxjs';\nimport {GetPizzasResponse} from '@app/models/pizzas/get-pizzas-response.model';\nimport {getUserTokenState} from '@app/store/root/client/user/user.selectors';\nimport {PizzasService} from '@app/services/pizzas/pizzas.service';\n\n/**\n * Provides Pizzas Store Effects.\n */\n@Injectable()\nexport class PizzasEffects {\n\n  /**\n   * @action - [Pizzas] GetPizzas\n   * @return:\n   *   Success: [Pizzas] GetPizzasSuccess\n   *   Failure: [Pizzas] GetPizzasFailure & [Errors] AddErrorResponse\n   */\n  getPizzas$ = createEffect(() => this.actions$.pipe(\n    ofType<GetPizzas>(ActionTypes.GetPizzas),\n    withLatestFrom(this.store.pipe(select(getUserTokenState))),\n    switchMap(([action, token]) => {\n        return this.pizzasService.getPizzas(token).pipe(\n          map((response: ResponseSuccess<GetPizzasResponse>) =>\n            new GetPizzasSuccess({response})\n          ),\n          catchError((errResponse: ResponseError) => of(errResponse).pipe(\n            switchMap((response: ResponseError) => [\n              new GetPizzasFailure({response}),\n              new AppStoreActions.AddErrorResponse({response})\n            ])\n          ))\n        );\n      }\n    )\n  ));\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<RootStoreState.State>,\n    private pizzasService: PizzasService,\n  ) {\n  }\n}\n","import {ActionTypes, Actions} from './pizzas.actions';\nimport {initialState} from './pizzas.state';\nimport {State} from './pizzas.state';\n\nexport function reducer(state = initialState, action: Actions): State {\n  switch (action.type) {\n\n    // Login\n    case ActionTypes.GetPizzas: {\n      return {\n        ...state,\n      };\n    }\n    case ActionTypes.GetPizzasSuccess: {\n      return {\n        ...state,\n        pizzasResponse: action.payload.response.data\n      };\n    }\n    case ActionTypes.GetPizzasFailure: {\n      return {\n        ...state,\n        pizzasResponse: null\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n\n}\n","import {RootStoreState} from '@app/store/root';\nimport {createSelector} from '@ngrx/store';\nimport {State} from '@app/store/root/client/pizzas/pizzas.state';\n\nexport const getPizzasState = (state: RootStoreState.State) => state.client.pizzas;\n\nexport const getPizzasResponseState = createSelector(\n  getPizzasState,\n  (state: State) => state.pizzasResponse\n);\n\nexport const getToppingsResponseState = createSelector(\n  getPizzasState,\n  (state: State) => state.toppingsResponse\n);\n","import {GetPizzasResponse} from '@app/models/pizzas/get-pizzas-response.model';\n\nexport interface State {\n  pizzasResponse: GetPizzasResponse;\n  toppingsResponse: string[];\n}\n\nexport const initialState: State = {\n  pizzasResponse: {\n    pizzas: []\n  },\n  toppingsResponse: [\n    'anchovy', 'bacon', 'basil', 'chili', 'mozzarella', 'mushroom',\n    'olive', 'onion', 'pepper', 'pepperoni', 'sweetcorn', 'tomato'\n  ]\n};\n","import {UserStoreState} from './user';\nimport {PizzasStoreState} from '@app/store/root/client/pizzas';\nimport {BasketStoreState} from '@app/store/root/client/basket';\n\nexport interface State {\n  user: UserStoreState.State;\n  pizzas: PizzasStoreState.State;\n  basket: BasketStoreState.State;\n}\n\nexport const initialState: State = {\n  user: null,\n  pizzas: null,\n  basket: null,\n};\n","import * as UserStoreActions from './user.actions';\nimport * as UserStoreSelectors from './user.selectors';\nimport * as UserStoreState from './user.state';\n\nexport {\n  UserStoreActions,\n  UserStoreSelectors,\n  UserStoreState\n};\n","import {Action} from '@ngrx/store';\nimport {ResponseSuccess} from '@app/models/response/response-success.model';\nimport {ResponseError} from '@app/models/response/response-error.model';\nimport {UserLoginRequest} from '@app/models/user/user-login-request.model';\nimport {UserLoginResponse} from '@app/models/user/user-login-response.model';\n\n\nexport enum ActionTypes {\n\n  // Login\n\n  Login = '[User] Login',\n  LoginSuccess = '[User] Login Success',\n  LoginFailure = '[User] Login Failure',\n}\n\n\n// Login\n\nexport class Login implements Action {\n  readonly type = ActionTypes.Login;\n\n  constructor(public payload: {request: UserLoginRequest}) {\n  }\n}\n\nexport class LoginSuccess implements Action {\n  readonly type = ActionTypes.LoginSuccess;\n\n  constructor(public payload: {response: ResponseSuccess<UserLoginResponse>}) {\n  }\n}\n\nexport class LoginFailure implements Action {\n  readonly type = ActionTypes.LoginFailure;\n\n  constructor(public payload: {response: ResponseError}) {\n  }\n}\n\n\nexport type Actions =\n\n  // Login\n\n  | Login\n  | LoginSuccess\n  | LoginFailure;\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {Store} from '@ngrx/store';\nimport {RootStoreState} from '../../index';\nimport {catchError, map, switchMap} from 'rxjs/operators';\nimport {ActionTypes, Login, LoginFailure, LoginSuccess} from './user.actions';\nimport {ResponseSuccess} from '@app/models/response/response-success.model';\nimport {UserLoginResponse} from '@app/models/user/user-login-response.model';\nimport {ResponseError} from '@app/models/response/response-error.model';\nimport {UserService} from '@app/services/user/user.service';\nimport {AppStoreActions} from '@app/store/root/app';\nimport {of} from 'rxjs';\n\n/**\n * Provides User Store Effects.\n */\n@Injectable()\nexport class UserEffects {\n\n  /**\n   * @action - [User] Login\n   * @return:\n   *   Success: [User] LoginSuccess\n   *   Failure: [User] LoginFailure & [Errors] AddErrorResponse\n   */\n  login$ = createEffect(() => this.actions$.pipe(\n    ofType<Login>(ActionTypes.Login),\n    switchMap(action =>\n      this.userService.login(action.payload.request).pipe(\n        map((response: ResponseSuccess<UserLoginResponse>) =>\n          new LoginSuccess({response})\n        ),\n        catchError((errResponse: ResponseError) => of(errResponse).pipe(\n          switchMap((response: ResponseError) => [\n            new LoginFailure({response}),\n            new AppStoreActions.AddErrorResponse({response})\n          ])\n        ))\n      )\n    )\n  ));\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<RootStoreState.State>,\n    private userService: UserService,\n  ) {\n  }\n}\n","import {ActionTypes, Actions} from './user.actions';\nimport {initialState} from './user.state';\nimport {State} from './user.state';\n\nexport function reducer(state = initialState, action: Actions): State {\n  switch (action.type) {\n\n    // Login\n    case ActionTypes.Login: {\n      return {\n        ...state,\n      };\n    }\n    case ActionTypes.LoginSuccess: {\n      return {\n        ...state,\n      };\n    }\n    case ActionTypes.LoginFailure: {\n      return {\n        ...state,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n\n}\n","import {createSelector} from '@ngrx/store';\nimport {State} from './user.state';\nimport {RootStoreState} from '@app/store/root';\n\nexport const getUserState = (state: RootStoreState.State) => state.client.user;\n\nexport const getUserTokenState = createSelector(\n  getUserState,\n  (state: State) => state.userTokenResponse.token\n);\n\nexport const getUserResponseState = createSelector(\n  getUserState,\n  (state: State) => state.userResponse\n);\n\n","import {UserResponse} from '@app/models/user/user-response.model';\nimport {UserLoginResponse} from '@app/models/user/user-login-response.model';\n\nexport interface State {\n  logined: boolean;\n  userTokenResponse: UserLoginResponse;\n  userResponse: UserResponse;\n}\n\nexport const initialState: State = {\n  logined: false,\n  userTokenResponse: {\n    token: 'TOKEN',\n    expiresAt: 'DATE'\n  },\n  userResponse: {\n    name: 'Ruslan'\n  }\n};\n","import { RootStoreModule } from './root-store.module';\n\nimport * as RootStoreState from './state';\n\nexport * from './client/user';\n\nimport * as fromRouter from './router';\n\nexport { RootStoreModule, RootStoreState, fromRouter };\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {StoreModule} from '@ngrx/store';\nimport {routerReducer, StoreRouterConnectingModule} from '@ngrx/router-store';\nimport {AppStoreModule} from '@app/store/root/app/app-store.module';\nimport {EffectsModule} from '@ngrx/effects';\nimport {StoreDevtoolsModule} from '@ngrx/store-devtools';\nimport {ClientStoreModule} from '@app/store/root/client';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n\n    StoreModule.forRoot({}, {}),\n    StoreRouterConnectingModule.forRoot(),\n    StoreDevtoolsModule.instrument({name: 'Pizzaiols Store'}),\n    EffectsModule.forRoot([]),\n\n    AppStoreModule,\n    ClientStoreModule,\n\n    // App root store\n    StoreModule.forFeature('router', routerReducer),\n  ],\n  declarations: []\n})\nexport class RootStoreModule {\n}\n","import { getSelectors, RouterReducerState } from '@ngrx/router-store';\nimport { createFeatureSelector } from '@ngrx/store';\nimport { Params } from '@angular/router';\n\nexport interface RouterStateUrl {\n  url: string;\n  queryParams: Params;\n  params: Params;\n}\n\nexport interface State {\n  router: RouterReducerState<RouterStateUrl>;\n}\n\nexport const selectRouter = createFeatureSelector<RouterReducerState<RouterStateUrl>>('router');\n\nexport const {\n  selectQueryParams,    // select the current route query params\n  selectRouteParams,    // select the current route params\n  selectRouteData,      // select the current route data\n  selectUrl,            // select the current url\n} = getSelectors(selectRouter);\n","import {ClientStoreState} from '@app/store/root/client';\nimport {AppStoreState} from '@app/store/root/app';\n\nexport interface State {\n  app: AppStoreState.State;\n  client: ClientStoreState.State;\n}\n\nexport const initialState: State = {\n  app: null,\n  client: null,\n};\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  host: 'localhost'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}