{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/in-memory-web-api/data/user/pizzas-response.data.ts","webpack:///src/app/in-memory-web-api/data/user/user-response-data.ts","webpack:///src/app/in-memory-web-api/in-memory-web-api.module.ts","webpack:///src/app/in-memory-web-api/services/app.in-memory-web-api.service.ts","webpack:///src/app/in-memory-web-api/services/pizzas.in-memory-web-api.service.ts","webpack:///src/app/in-memory-web-api/services/user.in-memory-web-api.service.ts","webpack:///src/app/mocks/pizzas/get-pizzas-response.mock.ts","webpack:///src/app/mocks/user/user-login-response.mock.ts","webpack:///src/app/models/pizzas/get-pizzas-response.model.ts","webpack:///src/app/models/response/response-success.model.ts","webpack:///src/app/models/user/user-login-response.model.ts","webpack:///src/app/services/pizzas/pizzas.service.ts","webpack:///src/app/services/user/user.service.ts","webpack:///src/app/store/root/app/actions.ts","webpack:///src/app/store/root/app/app-store.module.ts","webpack:///src/app/store/root/app/index.ts","webpack:///src/app/store/root/app/reducer.ts","webpack:///src/app/store/root/app/selectors.ts","webpack:///src/app/store/root/app/state.ts","webpack:///src/app/store/root/client/basket/basket.actions.ts","webpack:///src/app/store/root/client/basket/basket.reducer.ts","webpack:///src/app/store/root/client/basket/basket.selectors.ts","webpack:///src/app/store/root/client/basket/basket.state.ts","webpack:///src/app/store/root/client/basket/index.ts","webpack:///src/app/store/root/client/client-store.module.ts","webpack:///src/app/store/root/client/index.ts","webpack:///src/app/store/root/client/pizzas/index.ts","webpack:///src/app/store/root/client/pizzas/pizzas.actions.ts","webpack:///src/app/store/root/client/pizzas/pizzas.effects.ts","webpack:///src/app/store/root/client/pizzas/pizzas.reducer.ts","webpack:///src/app/store/root/client/pizzas/pizzas.selectors.ts","webpack:///src/app/store/root/client/pizzas/pizzas.state.ts","webpack:///src/app/store/root/client/state.ts","webpack:///src/app/store/root/client/user/index.ts","webpack:///src/app/store/root/client/user/user.actions.ts","webpack:///src/app/store/root/client/user/user.effects.ts","webpack:///src/app/store/root/client/user/user.reducer.ts","webpack:///src/app/store/root/client/user/user.selectors.ts","webpack:///src/app/store/root/client/user/user.state.ts","webpack:///src/app/store/root/index.ts","webpack:///src/app/store/root/root-store.module.ts","webpack:///src/app/store/root/router/index.ts","webpack:///src/app/store/root/state.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","children","loadChildren","mod","PizzasModule","AuthModule","BasketModule","redirectTo","pathMatch","AppRoutingModule","forRoot","useHash","enableTracing","imports","AppComponent","selector","templateUrl","styleUrls","AppModule","provide","useClass","declarations","providers","bootstrap","pizzasResponseData","data","userResponseData","InMemoryWebApiModule","delay","dataEncapsulation","apiBase","host","AppInMemoryWebAPIService","userInMemoryWebAPIService","pizzasInMemoryWebAPIService","reqInfo","url","collectionName","get","undefined","options","headers","statusText","status","PizzasInMemoryWebAPIService","getPizzas","utils","createResponse$","body","OK","finishOptions","UserInMemoryWebAPIService","getProfile","postLogin","mockGetPizzasResponse","pizzas","name","description","toppings","price","mockUserLoginResponse","token","expiresAt","GetPizzasResponse","ResponseSuccess","success","UserLoginResponse","PizzasService","http","Authorization","providedIn","UserService","request","post","ActionTypes","AddErrorResponse","payload","type","AppStoreModule","forFeature","reducer","state","action","errorResponse","response","getAppState","app","getErrorsResponseState","initialState","AddPizzas","resp","pizzasResponse","getBasketState","client","basket","getPizzasResponseState","getTotalState","map","pizza","reduce","accumulator","currentValue","getPizzasCountState","length","slice","FEATURE_REDUCER_TOKEN","getReducers","user","ClientStoreModule","useFactory","GetPizzas","GetPizzasSuccess","GetPizzasFailure","PizzasEffects","actions$","store","pizzasService","getPizzas$","pipe","errResponse","getPizzasState","getToppingsResponseState","toppingsResponse","Login","LoginSuccess","LoginFailure","UserEffects","userService","login$","login","getUserState","getUserTokenState","userTokenResponse","getUserResponseState","userResponse","logined","RootStoreModule","instrument","selectRouter","selectQueryParams","selectRouteParams","selectRouteData","selectUrl","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {AppComponent} from './app.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AppComponent,\n    children: [\n      {\n        path: 'pizzas',\n        loadChildren: () => import('./modules/pizzas/pizzas.module').then(mod => mod.PizzasModule)\n      },\n      {\n        path: 'auth',\n        loadChildren: () => import('./modules/auth/auth.module').then(mod => mod.AuthModule)\n      },\n      {\n        path: 'basket',\n        loadChildren: () => import('./modules/basket/basket.module').then(mod => mod.BasketModule)\n      },\n      {\n        path: '',\n        redirectTo: 'pizzas',\n        pathMatch: 'full'\n      },\n      {\n        path: '**',\n        redirectTo: ''\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(\n      routes,\n      {\n        useHash: false,\n        enableTracing: false\n      }\n    )\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n}\n","<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport {RootStoreModule} from '@app/store/root';\nimport {HttpClientModule} from '@angular/common/http';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {InMemoryWebApiModule} from '@app/in-memory-web-api/in-memory-web-api.module';\nimport {HashLocationStrategy, LocationStrategy} from '@angular/common';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    InMemoryWebApiModule,\n    AppRoutingModule,\n    RootStoreModule,\n  ],\n  providers: [{provide : LocationStrategy , useClass: HashLocationStrategy}],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {GetPizzasResponse} from '@app/models/pizzas/get-pizzas-response.model';\nimport mockGetPizzasResponse from '@app/mocks/pizzas/get-pizzas-response.mock';\nimport {ResponseSuccess} from '@app/models/response/response-success.model';\n\nexport const pizzasResponseData: ResponseSuccess<GetPizzasResponse> = new ResponseSuccess<GetPizzasResponse>()\npizzasResponseData.data = mockGetPizzasResponse;\n","import {UserLoginResponse} from '@app/models/user/user-login-response.model';\nimport mockUserLoginResponse from '@app/mocks/user/user-login-response.mock';\n\nexport const userResponseData: UserLoginResponse = mockUserLoginResponse;\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {HttpClientInMemoryWebApiModule} from 'angular-in-memory-web-api';\nimport {AppInMemoryWebAPIService} from '@app/in-memory-web-api/services/app.in-memory-web-api.service';\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    HttpClientInMemoryWebApiModule.forRoot(\n      AppInMemoryWebAPIService, {\n        delay: 0,\n        dataEncapsulation: true,\n        apiBase: '/api/v1',\n        host: 'localhost',\n      }\n    )\n  ]\n})\nexport class InMemoryWebApiModule {\n}\n","import {Injectable} from '@angular/core';\nimport {getStatusText, InMemoryDbService, RequestInfo, ResponseOptions} from 'angular-in-memory-web-api';\nimport {userResponseData} from '@app/in-memory-web-api/data/user/user-response-data';\nimport {UserInMemoryWebAPIService} from '@app/in-memory-web-api/services/user.in-memory-web-api.service';\nimport {PizzasInMemoryWebAPIService} from '@app/in-memory-web-api/services/pizzas.in-memory-web-api.service';\nimport {pizzasResponseData} from '@app/in-memory-web-api/data/user/pizzas-response.data';\n\n@Injectable()\nexport class AppInMemoryWebAPIService implements InMemoryDbService {\n  userInMemoryWebAPIService;\n  pizzasInMemoryWebAPIService;\n\n  createDb() {\n    this.userInMemoryWebAPIService = new UserInMemoryWebAPIService();\n    this.pizzasInMemoryWebAPIService = new PizzasInMemoryWebAPIService();\n\n    return {\n      userResponseData,\n      pizzasResponseData\n    };\n  }\n\n  /**\n   * HTTP GET interceptor.\n   */\n  get(reqInfo: RequestInfo) {\n    const url = reqInfo.req.url;\n    const collectionName = reqInfo.collectionName;\n\n    // User\n    if (collectionName === this.userInMemoryWebAPIService.collectionName) {\n      return this.userInMemoryWebAPIService.get(reqInfo);\n    }\n\n    // Pizzas\n    if (collectionName === this.pizzasInMemoryWebAPIService.collectionName) {\n      return this.pizzasInMemoryWebAPIService.get(reqInfo);\n    }\n\n    return undefined; // let the default GET handle all others\n  }\n\n  /**\n   * Helper\n   */\n  private finishOptions(options: ResponseOptions, {headers, url}: RequestInfo) {\n    options.statusText = getStatusText(options.status);\n    options.headers = headers;\n    options.url = url;\n\n    return options;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {getStatusText, RequestInfo, ResponseOptions, STATUS} from 'angular-in-memory-web-api';\nimport {environment} from '@src/environments/environment';\nimport {APIService} from '@app/interfaces/api-service.interface';\nimport {userResponseData} from '@app/in-memory-web-api/data/user/user-response-data';\nimport {pizzasResponseData} from '@app/in-memory-web-api/data/user/pizzas-response.data';\n\n@Injectable()\nexport class PizzasInMemoryWebAPIService implements APIService {\n  readonly host = environment.host;\n  readonly collectionName = 'pizzas';\n\n  /**\n   * HTTP GET interceptor.\n   */\n  get(reqInfo: RequestInfo) {\n    const url = reqInfo.req.url;\n\n    switch (url) {\n      case `${this.host}/api/v1/pizzas`: {\n        return this.getPizzas(reqInfo);\n      }\n    }\n\n    return undefined; // let the default GET handle all others\n  }\n\n  /**\n   * GET: `/api/v1/pizzas`.\n   * Returns pizzas response\n   */\n  getPizzas(reqInfo: RequestInfo) {\n    return reqInfo.utils.createResponse$(() => {\n      const options: ResponseOptions = {\n        body: pizzasResponseData,\n        status: STATUS.OK\n      };\n\n      return this.finishOptions(options, reqInfo);\n    });\n  }\n\n  /**\n   * Helper\n   */\n  private finishOptions(options: ResponseOptions, {headers, url}: RequestInfo) {\n    options.statusText = getStatusText(options.status);\n    options.headers = headers;\n    options.url = url;\n\n    return options;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {getStatusText, RequestInfo, ResponseOptions, STATUS} from 'angular-in-memory-web-api';\nimport {environment} from '@src/environments/environment';\nimport {APIService} from '@app/interfaces/api-service.interface';\nimport {userResponseData} from '@app/in-memory-web-api/data/user/user-response-data';\n\n@Injectable()\nexport class UserInMemoryWebAPIService implements APIService {\n  readonly host = environment.host;\n  readonly collectionName = 'user';\n\n  /**\n   * HTTP GET interceptor.\n   */\n  get(reqInfo: RequestInfo) {\n    const url = reqInfo.req.url;\n\n    switch (url) {\n      case `${this.host}/api/v1/user/profile`: {\n        return this.getProfile(reqInfo);\n      }\n    }\n\n    return undefined; // let the default GET handle all others\n  }\n\n  post(reqInfo: RequestInfo) {\n    const url = reqInfo.req.url;\n\n    switch (url) {\n      case `${this.host}/api/v1/user/login`: {\n        return this.postLogin(reqInfo);\n      }\n    }\n\n  }\n\n  /**\n   * GET: `/api/v1/user/profile`.\n   * Returns info about profile\n   */\n  getProfile(reqInfo: RequestInfo) {\n    return reqInfo.utils.createResponse$(() => {\n      const options: ResponseOptions = {\n        body: userResponseData,\n        status: STATUS.OK\n      };\n\n      return this.finishOptions(options, reqInfo);\n    });\n  }\n\n  /**\n   * POST: `/api/v1/user/login`.\n   * Returns user login response.\n   */\n  postLogin(reqInfo: RequestInfo) {\n    return reqInfo.utils.createResponse$(() => {\n      const options: ResponseOptions = {\n        body: userResponseData,\n        status: STATUS.OK\n      };\n\n      return this.finishOptions(options, reqInfo);\n    });\n  }\n\n  /**\n   * Helper\n   */\n  private finishOptions(options: ResponseOptions, {headers, url}: RequestInfo) {\n    options.statusText = getStatusText(options.status);\n    options.headers = headers;\n    options.url = url;\n\n    return options;\n  }\n}\n","import {GetPizzasResponse} from '@app/models/pizzas/get-pizzas-response.model';\n\nconst mockGetPizzasResponse = new GetPizzasResponse();\nmockGetPizzasResponse.pizzas = [\n  {\n    id: '0',\n    name: 'Margherita',\n    description: 'PIZZA_DESCRIPTION_0',\n    toppings: ['anchovy', 'basil', 'mozzarella', 'tomato'],\n    price: 100,\n  },\n  {\n    id: '1',\n    name: 'Marinara',\n    description: 'PIZZA_DESCRIPTION_1',\n    toppings: ['sweetcorn', 'pepper', 'onion', 'olive'],\n    price: 130,\n  },\n  {\n    id: '2',\n    name: 'Napoletana',\n    description: 'PIZZA_DESCRIPTION_2',\n    toppings: ['bacon', 'mushroom', 'chili', 'pepperoni'],\n    price: 146,\n  }\n];\n\nexport default mockGetPizzasResponse;\n","import {UserLoginResponse} from '@app/models/user/user-login-response.model';\n\nconst mockUserLoginResponse = new UserLoginResponse();\nmockUserLoginResponse.token = 'TOKEN';\n// TODO: add date\nmockUserLoginResponse.expiresAt = 'DATE';\n\nexport default mockUserLoginResponse;\n","export class GetPizzasResponse {\n  pizzas: any[];\n}\n","export class ResponseSuccess<T> {\n  data: T;\n  success = true;\n}\n","export class UserLoginResponse {\n  token: string;\n  expiresAt: string;\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {environment} from 'src/environments/environment';\nimport {APIService} from '@app/interfaces/api-service.interface';\nimport {ResponseSuccess} from '@app/models/response/response-success.model';\nimport {GetPizzasResponse} from '@app/models/pizzas/get-pizzas-response.model';\n\n/**\n * Implementation of pizzas APIs.\n */\n@Injectable({providedIn: 'root'})\nexport class PizzasService implements APIService {\n  readonly host = environment.host;\n\n  constructor(private http: HttpClient) {\n  }\n\n  /**\n   * GET: /api/v1/pizzas\n   * Get Pizzas.\n   */\n  getPizzas(token: string): Observable<ResponseSuccess<GetPizzasResponse>> {\n    return this.http.get<ResponseSuccess<GetPizzasResponse>>(`${this.host}/api/v1/pizzas`, {\n      headers: new HttpHeaders({Authorization: `Bearer ${token}`}),\n    });\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {environment} from 'src/environments/environment';\nimport {APIService} from '@app/interfaces/api-service.interface';\nimport {UserLoginRequest} from '@app/models/user/user-login-request.model';\nimport {ResponseSuccess} from '@app/models/response/response-success.model';\nimport {UserLoginResponse} from '@app/models/user/user-login-response.model';\n\n/**\n * Implementation of user APIs.\n */\n@Injectable({providedIn: 'root'})\nexport class UserService implements APIService {\n  readonly host = environment.host;\n\n  constructor(private http: HttpClient) {\n  }\n\n  /**\n   * POST: /api/v1/user/login\n   * Login.\n   */\n  login(request: UserLoginRequest): Observable<ResponseSuccess<UserLoginResponse>> {\n    return this.http.post<ResponseSuccess<UserLoginResponse>>(`${this.host}/api/v1/user/login`, request);\n  }\n}\n","import {Action} from '@ngrx/store';\nimport {ResponseError} from '@app/models/response/response-error.model';\n\nexport enum ActionTypes {\n  AddErrorResponse = '[Errors] Add Error Response',\n}\n\n\nexport class AddErrorResponse implements Action {\n  public readonly type = ActionTypes.AddErrorResponse;\n\n  constructor(public payload: { response: ResponseError }) {\n  }\n}\n\nexport type Actions = AddErrorResponse;\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {StoreModule} from '@ngrx/store';\nimport {AppStoreReducer} from '@app/store/root/app/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StoreModule.forFeature('app', AppStoreReducer.reducer),\n  ],\n})\nexport class AppStoreModule {\n}\n","import * as AppStoreActions from './actions';\nimport * as AppStoreSelectors from './selectors';\nimport * as AppStoreState from './state';\nimport * as AppStoreReducer from './reducer';\n\nexport {\n  AppStoreActions,\n  AppStoreSelectors,\n  AppStoreState,\n  AppStoreReducer,\n};\n","import {Actions, ActionTypes} from './actions';\nimport {initialState, State} from './state';\n\nexport function reducer(state = initialState, action: Actions): State {\n  switch (action.type) {\n    case ActionTypes.AddErrorResponse: {\n      return {\n        ...state,\n        errorResponse: action.payload.response\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","import {createSelector} from '@ngrx/store';\nimport {State} from './state';\nimport {RootStoreState} from '@app/store/root';\n\nexport const getAppState = (state: RootStoreState.State) => state.app;\n\nexport const getErrorsResponseState = createSelector(\n  getAppState,\n  (state: State) => state.errorResponse\n);\n","import {ResponseError} from '@app/models/response/response-error.model';\n\nexport interface State {\n  errorResponse: ResponseError;\n}\n\nexport const initialState: State = {\n  errorResponse: null,\n};\n","import {Action} from '@ngrx/store';\n\n\nexport enum ActionTypes {\n  AddPizzas = '[Basket] Add Pizzas',\n}\n\n\n// Add Pizzas\n\nexport class AddPizzas implements Action {\n  readonly type = ActionTypes.AddPizzas;\n\n  constructor(public payload: {pizzas: any[]}) {\n  }\n}\n\n\nexport type Actions = AddPizzas;\n","import {ActionTypes, Actions} from './basket.actions';\nimport {initialState} from './basket.state';\nimport {State} from './basket.state';\nimport {GetPizzasResponse} from '@app/models/pizzas/get-pizzas-response.model';\n\nexport function reducer(state = initialState, action: Actions): State {\n  switch (action.type) {\n    // Add Pizzas\n    case ActionTypes.AddPizzas: {\n      const resp = new GetPizzasResponse();\n      resp.pizzas = action.payload.pizzas;\n\n      return {\n        ...state,\n        pizzasResponse: resp\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n\n}\n","import {RootStoreState} from '@app/store/root';\nimport {createSelector} from '@ngrx/store';\nimport {State} from '@app/store/root/client/basket/basket.state';\nimport {GetPizzasResponse} from '@app/models/pizzas/get-pizzas-response.model';\n\nexport const getBasketState = (state: RootStoreState.State) => state.client.basket;\n\nexport const getPizzasResponseState = createSelector(\n  getBasketState,\n  (state: State) => state.pizzasResponse\n);\n\nexport const getTotalState = createSelector(\n  getPizzasResponseState,\n  (state: GetPizzasResponse) => {\n    if (state.pizzas) {\n      return state.pizzas\n        .map(pizza => pizza.price)\n        .reduce(\n          (accumulator, currentValue) => accumulator + currentValue\n        );\n    }\n  }\n);\n\nexport const getPizzasCountState = createSelector(\n  getPizzasResponseState,\n  (state: GetPizzasResponse) => {\n    if (state.pizzas) {\n      return state.pizzas.length;\n    }\n  }\n);\n","import {GetPizzasResponse} from '@app/models/pizzas/get-pizzas-response.model';\nimport mockGetPizzasResponse from '@app/mocks/pizzas/get-pizzas-response.mock';\n\nexport interface State {\n  pizzasResponse: GetPizzasResponse;\n}\n\nexport const initialState: State = {\n  pizzasResponse: {\n    pizzas: mockGetPizzasResponse.pizzas.slice(0, 2)\n  }\n};\n","import * as BasketStoreActions from './basket.actions';\nimport * as BasketStoreSelectors from './basket.selectors';\nimport * as BasketStoreState from './basket.state';\n\nexport {\n  BasketStoreActions,\n  BasketStoreSelectors,\n  BasketStoreState\n};\n","import {CommonModule} from '@angular/common';\nimport {InjectionToken, NgModule} from '@angular/core';\nimport {ActionReducerMap, StoreModule} from '@ngrx/store';\nimport {EffectsModule} from '@ngrx/effects';\nimport * as ClientStoreState from '@app/store/root/client/state';\nimport * as UserStoreReducer from '@app/store/root/client/user/user.reducer';\nimport * as PizzasStoreReducer from '@app/store/root/client/pizzas/pizzas.reducer';\nimport * as BasketStoreReducer from '@app/store/root/client/basket/basket.reducer';\nimport {UserEffects} from '@app/store/root/client/user/user.effects';\nimport {PizzasEffects} from '@app/store/root/client/pizzas/pizzas.effects';\n\n\nexport const FEATURE_REDUCER_TOKEN = new InjectionToken<ActionReducerMap<ClientStoreState.State>>('Client Feature Reducers');\n\nexport function getReducers(): ActionReducerMap<ClientStoreState.State> {\n  // map of reducers\n  return {\n    user: UserStoreReducer.reducer,\n    pizzas: PizzasStoreReducer.reducer,\n    basket: BasketStoreReducer.reducer,\n  };\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    EffectsModule.forFeature([\n      UserEffects,\n      PizzasEffects,\n    ]),\n    StoreModule.forFeature('client', FEATURE_REDUCER_TOKEN),\n  ],\n  providers: [\n    {\n      provide: FEATURE_REDUCER_TOKEN,\n      useFactory: getReducers,\n    },\n  ],\n})\nexport class ClientStoreModule {\n}\n","import {ClientStoreModule} from './client-store.module';\n\nimport * as ClientStoreState from './state';\n\nexport * from './user';\nexport * from './pizzas';\nexport * from './basket';\n\nexport {ClientStoreModule, ClientStoreState};\n","import * as PizzasStoreActions from './pizzas.actions';\nimport * as PizzasStoreSelectors from './pizzas.selectors';\nimport * as PizzasStoreState from './pizzas.state';\n\nexport {\n  PizzasStoreActions,\n  PizzasStoreSelectors,\n  PizzasStoreState\n};\n","import {Action} from '@ngrx/store';\nimport {ResponseSuccess} from '@app/models/response/response-success.model';\nimport {ResponseError} from '@app/models/response/response-error.model';\nimport {GetPizzasResponse} from '@app/models/pizzas/get-pizzas-response.model';\n\n\nexport enum ActionTypes {\n\n  // Get Pizzas\n\n  GetPizzas = '[Pizzas] Get Pizzas',\n  GetPizzasSuccess = '[Pizzas] Get Pizzas Success',\n  GetPizzasFailure = '[Pizzas] Get Pizzas Failure',\n}\n\n\n// GetPizzas\n\nexport class GetPizzas implements Action {\n  readonly type = ActionTypes.GetPizzas;\n}\n\nexport class GetPizzasSuccess implements Action {\n  readonly type = ActionTypes.GetPizzasSuccess;\n\n  constructor(public payload: {response: ResponseSuccess<GetPizzasResponse>}) {\n  }\n}\n\nexport class GetPizzasFailure implements Action {\n  readonly type = ActionTypes.GetPizzasFailure;\n\n  constructor(public payload: {response: ResponseError}) {\n  }\n}\n\n\nexport type Actions =\n\n  // GetPizzas\n\n  | GetPizzas\n  | GetPizzasSuccess\n  | GetPizzasFailure;\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {select, Store} from '@ngrx/store';\nimport {RootStoreState} from '../../index';\nimport {catchError, map, switchMap, withLatestFrom} from 'rxjs/operators';\nimport {ActionTypes, GetPizzas, GetPizzasFailure, GetPizzasSuccess} from './pizzas.actions';\nimport {ResponseSuccess} from '@app/models/response/response-success.model';\nimport {ResponseError} from '@app/models/response/response-error.model';\nimport {AppStoreActions} from '@app/store/root/app';\nimport {of} from 'rxjs';\nimport {GetPizzasResponse} from '@app/models/pizzas/get-pizzas-response.model';\nimport {getUserTokenState} from '@app/store/root/client/user/user.selectors';\nimport {PizzasService} from '@app/services/pizzas/pizzas.service';\n\n/**\n * Provides Pizzas Store Effects.\n */\n@Injectable()\nexport class PizzasEffects {\n\n  /**\n   * @action - [Pizzas] GetPizzas\n   * @return:\n   *   Success: [Pizzas] GetPizzasSuccess\n   *   Failure: [Pizzas] GetPizzasFailure & [Errors] AddErrorResponse\n   */\n  getPizzas$ = createEffect(() => this.actions$.pipe(\n    ofType<GetPizzas>(ActionTypes.GetPizzas),\n    withLatestFrom(this.store.pipe(select(getUserTokenState))),\n    switchMap(([action, token]) => {\n        return this.pizzasService.getPizzas(token).pipe(\n          map((response: ResponseSuccess<GetPizzasResponse>) =>\n            new GetPizzasSuccess({response})\n          ),\n          catchError((errResponse: ResponseError) => of(errResponse).pipe(\n            switchMap((response: ResponseError) => [\n              new GetPizzasFailure({response}),\n              new AppStoreActions.AddErrorResponse({response})\n            ])\n          ))\n        );\n      }\n    )\n  ));\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<RootStoreState.State>,\n    private pizzasService: PizzasService,\n  ) {\n  }\n}\n","import {ActionTypes, Actions} from './pizzas.actions';\nimport {initialState} from './pizzas.state';\nimport {State} from './pizzas.state';\n\nexport function reducer(state = initialState, action: Actions): State {\n  switch (action.type) {\n\n    // Login\n    case ActionTypes.GetPizzas: {\n      return {\n        ...state,\n      };\n    }\n    case ActionTypes.GetPizzasSuccess: {\n      return {\n        ...state,\n        pizzasResponse: action.payload.response.data\n      };\n    }\n    case ActionTypes.GetPizzasFailure: {\n      return {\n        ...state,\n        pizzasResponse: null\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n\n}\n","import {RootStoreState} from '@app/store/root';\nimport {createSelector} from '@ngrx/store';\nimport {State} from '@app/store/root/client/pizzas/pizzas.state';\n\nexport const getPizzasState = (state: RootStoreState.State) => state.client.pizzas;\n\nexport const getPizzasResponseState = createSelector(\n  getPizzasState,\n  (state: State) => state.pizzasResponse\n);\n\nexport const getToppingsResponseState = createSelector(\n  getPizzasState,\n  (state: State) => state.toppingsResponse\n);\n","import {GetPizzasResponse} from '@app/models/pizzas/get-pizzas-response.model';\n\nexport interface State {\n  pizzasResponse: GetPizzasResponse;\n  toppingsResponse: string[];\n}\n\nexport const initialState: State = {\n  pizzasResponse: {\n    pizzas: []\n  },\n  toppingsResponse: [\n    'anchovy', 'bacon', 'basil', 'chili', 'mozzarella', 'mushroom',\n    'olive', 'onion', 'pepper', 'pepperoni', 'sweetcorn', 'tomato'\n  ]\n};\n","import {UserStoreState} from './user';\nimport {PizzasStoreState} from '@app/store/root/client/pizzas';\nimport {BasketStoreState} from '@app/store/root/client/basket';\n\nexport interface State {\n  user: UserStoreState.State;\n  pizzas: PizzasStoreState.State;\n  basket: BasketStoreState.State;\n}\n\nexport const initialState: State = {\n  user: null,\n  pizzas: null,\n  basket: null,\n};\n","import * as UserStoreActions from './user.actions';\nimport * as UserStoreSelectors from './user.selectors';\nimport * as UserStoreState from './user.state';\n\nexport {\n  UserStoreActions,\n  UserStoreSelectors,\n  UserStoreState\n};\n","import {Action} from '@ngrx/store';\nimport {ResponseSuccess} from '@app/models/response/response-success.model';\nimport {ResponseError} from '@app/models/response/response-error.model';\nimport {UserLoginRequest} from '@app/models/user/user-login-request.model';\nimport {UserLoginResponse} from '@app/models/user/user-login-response.model';\n\n\nexport enum ActionTypes {\n\n  // Login\n\n  Login = '[User] Login',\n  LoginSuccess = '[User] Login Success',\n  LoginFailure = '[User] Login Failure',\n}\n\n\n// Login\n\nexport class Login implements Action {\n  readonly type = ActionTypes.Login;\n\n  constructor(public payload: {request: UserLoginRequest}) {\n  }\n}\n\nexport class LoginSuccess implements Action {\n  readonly type = ActionTypes.LoginSuccess;\n\n  constructor(public payload: {response: ResponseSuccess<UserLoginResponse>}) {\n  }\n}\n\nexport class LoginFailure implements Action {\n  readonly type = ActionTypes.LoginFailure;\n\n  constructor(public payload: {response: ResponseError}) {\n  }\n}\n\n\nexport type Actions =\n\n  // Login\n\n  | Login\n  | LoginSuccess\n  | LoginFailure;\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {Store} from '@ngrx/store';\nimport {RootStoreState} from '../../index';\nimport {catchError, map, switchMap} from 'rxjs/operators';\nimport {ActionTypes, Login, LoginFailure, LoginSuccess} from './user.actions';\nimport {ResponseSuccess} from '@app/models/response/response-success.model';\nimport {UserLoginResponse} from '@app/models/user/user-login-response.model';\nimport {ResponseError} from '@app/models/response/response-error.model';\nimport {UserService} from '@app/services/user/user.service';\nimport {AppStoreActions} from '@app/store/root/app';\nimport {of} from 'rxjs';\n\n/**\n * Provides User Store Effects.\n */\n@Injectable()\nexport class UserEffects {\n\n  /**\n   * @action - [User] Login\n   * @return:\n   *   Success: [User] LoginSuccess\n   *   Failure: [User] LoginFailure & [Errors] AddErrorResponse\n   */\n  login$ = createEffect(() => this.actions$.pipe(\n    ofType<Login>(ActionTypes.Login),\n    switchMap(action =>\n      this.userService.login(action.payload.request).pipe(\n        map((response: ResponseSuccess<UserLoginResponse>) =>\n          new LoginSuccess({response})\n        ),\n        catchError((errResponse: ResponseError) => of(errResponse).pipe(\n          switchMap((response: ResponseError) => [\n            new LoginFailure({response}),\n            new AppStoreActions.AddErrorResponse({response})\n          ])\n        ))\n      )\n    )\n  ));\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<RootStoreState.State>,\n    private userService: UserService,\n  ) {\n  }\n}\n","import {ActionTypes, Actions} from './user.actions';\nimport {initialState} from './user.state';\nimport {State} from './user.state';\n\nexport function reducer(state = initialState, action: Actions): State {\n  switch (action.type) {\n\n    // Login\n    case ActionTypes.Login: {\n      return {\n        ...state,\n      };\n    }\n    case ActionTypes.LoginSuccess: {\n      return {\n        ...state,\n      };\n    }\n    case ActionTypes.LoginFailure: {\n      return {\n        ...state,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n\n}\n","import {createSelector} from '@ngrx/store';\nimport {State} from './user.state';\nimport {RootStoreState} from '@app/store/root';\n\nexport const getUserState = (state: RootStoreState.State) => state.client.user;\n\nexport const getUserTokenState = createSelector(\n  getUserState,\n  (state: State) => state.userTokenResponse.token\n);\n\nexport const getUserResponseState = createSelector(\n  getUserState,\n  (state: State) => state.userResponse\n);\n\n","import {UserResponse} from '@app/models/user/user-response.model';\nimport {UserLoginResponse} from '@app/models/user/user-login-response.model';\n\nexport interface State {\n  logined: boolean;\n  userTokenResponse: UserLoginResponse;\n  userResponse: UserResponse;\n}\n\nexport const initialState: State = {\n  logined: false,\n  userTokenResponse: {\n    token: 'TOKEN',\n    expiresAt: 'DATE'\n  },\n  userResponse: {\n    name: 'Ruslan'\n  }\n};\n","import { RootStoreModule } from './root-store.module';\n\nimport * as RootStoreState from './state';\n\nexport * from './client/user';\n\nimport * as fromRouter from './router';\n\nexport { RootStoreModule, RootStoreState, fromRouter };\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {StoreModule} from '@ngrx/store';\nimport {routerReducer, StoreRouterConnectingModule} from '@ngrx/router-store';\nimport {AppStoreModule} from '@app/store/root/app/app-store.module';\nimport {EffectsModule} from '@ngrx/effects';\nimport {StoreDevtoolsModule} from '@ngrx/store-devtools';\nimport {ClientStoreModule} from '@app/store/root/client';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n\n    StoreModule.forRoot({}, {}),\n    StoreRouterConnectingModule.forRoot(),\n    StoreDevtoolsModule.instrument({name: 'Pizzaiols Store'}),\n    EffectsModule.forRoot([]),\n\n    AppStoreModule,\n    ClientStoreModule,\n\n    // App root store\n    StoreModule.forFeature('router', routerReducer),\n  ],\n  declarations: []\n})\nexport class RootStoreModule {\n}\n","import { getSelectors, RouterReducerState } from '@ngrx/router-store';\nimport { createFeatureSelector } from '@ngrx/store';\nimport { Params } from '@angular/router';\n\nexport interface RouterStateUrl {\n  url: string;\n  queryParams: Params;\n  params: Params;\n}\n\nexport interface State {\n  router: RouterReducerState<RouterStateUrl>;\n}\n\nexport const selectRouter = createFeatureSelector<RouterReducerState<RouterStateUrl>>('router');\n\nexport const {\n  selectQueryParams,    // select the current route query params\n  selectRouteParams,    // select the current route params\n  selectRouteData,      // select the current route data\n  selectUrl,            // select the current url\n} = getSelectors(selectRouter);\n","import {ClientStoreState} from '@app/store/root/client';\nimport {AppStoreState} from '@app/store/root/app';\n\nexport interface State {\n  app: AppStoreState.State;\n  client: ClientStoreState.State;\n}\n\nexport const initialState: State = {\n  app: null,\n  client: null,\n};\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  host: 'localhost'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}